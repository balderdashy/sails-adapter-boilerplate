// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, TaskPool, uuid, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  uuid = require('node-uuid');

  _ = require('underscore');

  module.exports = TaskPool = (function(_super) {

    __extends(TaskPool, _super);

    TaskPool.prototype.name = "TaskPool";

    function TaskPool() {
      var runNextTask, taskQueue, working,
        _this = this;
      taskQueue = [];
      working = false;
      this.addTask = function(promise, args, ctx) {
        var newTask;
        if (!(_.isArray(args))) {
          args = [args];
        }
        newTask = {
          promise: promise,
          args: args,
          ctx: ctx,
          id: uuid.v4()
        };
        taskQueue.push(newTask);
        return newTask.id;
      };
      runNextTask = function() {
        var currentTask;
        currentTask = taskQueue.shift();
        if (!(currentTask != null)) {
          _this.emit('drain:complete');
          working = false;
          return null;
        }
        _this.emit('task:start', currentTask.id);
        return currentTask.promise.apply(currentTask.ctx, currentTask.args).end(function(result) {
          _this.emit('task:complete', currentTask.id, result);
          return runNextTask();
        }, function(err) {
          _this.emit('error', currentTask.id, err);
          return runNextTask();
        });
      };
      this.drain = function() {
        if (working) {
          return;
        }
        working = true;
        return runNextTask();
      };
      this.getTaskCount = function() {
        return taskQueue.length;
      };
    }

    return TaskPool;

  })(EventEmitter);

}).call(this);
